#!/bin/bash -lp

#export WORKDIR="$HOME/Projects"

### free disc space for mvn projects
function mvn-clean {
  path=${1:-$WORKDIR}
  exclude=${2}
  if [ -z "${exclude}" ]; then
    find ${path} -maxdepth 3 -type f -name "pom.xml" -print0 | xargs -0 -n1 -P4 sh -c 'mvn clean -T 1C -o -f $0'
  else
    find ${path} -maxdepth 3 -type f \( -name "pom.xml" ! -iname "${exclude}" \) -print0 | xargs -0 -n1 -P4 sh -c 'mvn clean -T 1C -o -f $0'
  fi
}

## function: moves all non java resources in java folder to resources
function mvn-mv {
  [[ -e "$(git rev-parse --git-dir 2> /dev/null)" ]] && local versioned=git
  find . -type f -not -name *.java -path "**/java/*" -print0 |\
    while IFS= read -r -d $'\0' file; do
      local d=${file%/*}
      d=${d#*/}
      local basedir=$(perl -pe 's|(.*)java.*|\./\1|g' <<< ${d})
      d=$(perl -pe 's|.*java(.*)|\./\1|g' <<< ${d})
      local resources="${basedir}resources/${d}"
      mkdir -p ${resources}
      ${versioned} mv "$file" "$resources"
    done
  # cleanup empty dirs
  find . -type d -not -path "**/.git/*" -empty -delete
}

## shows dependency tree of a given artifact
function mvn-tree {
  # groupId:artifactId:packaging:classifier:version:scope
  IFS=':' read -a fields <<< "$1"
  shift

  if [ ${#fields[@]} -lt 3 ]; then
    info "Usage: ${FUNCNAME[0]} <groupId>:<artifactId>[:<packaging>][:<classifier>]:<version>"
    kill -INT $$
  fi

  local groupId=${fields[0]}
  local artifactId=${fields[1]}
  local packaging
  local classifier
  local version

  if [ ${#fields[@]} -eq 3 ]; then version=${fields[2]}; fi
  if [ ${#fields[@]} -eq 4 ]; then packaging=${fields[2]}; version=${fields[3]}; fi
  if [ ${#fields[@]} -eq 5 ]; then packaging=${fields[2]}; classifier=${fields[3]}; version=${fields[4]}; fi

  local POM_DIR="`echo "${groupId}" | tr . /`/${artifactId}/${version}"
  local POM_PATH="$POM_DIR/${artifactId}-${version}.pom"

  artifact=${groupId}:${artifactId}:${version}:${packaging:=pom}
  [ -n "${classifier}" ] && artifact=${artifact}:${classifier}

  debug artifact=${artifact}
  debug path=${POM_PATH}

  # A string of the form groupId:artifactId:version[:packaging][:classifier]
  mvn dependency:get -Dartifact=${artifact} -Dtransitive=false "$@" || kill -INT $$
  mvn -f "$HOME/.m2/repository/$POM_PATH" dependency:tree "$@"
}

## analyzes dependencies of a given artifact
function mvn-analyze {
  # groupId:artifactId:classifier:version:scope
  IFS=':' read -a fields <<< "$1"
  shift

  if [ ${#fields[@]} -lt 3 ]; then
    info "Usage: ${FUNCNAME[0]} <groupId>:<artifactId>[:<classifier>]:<version>"
    kill -INT $$
  fi

  local groupId=${fields[0]}
  local artifactId=${fields[1]}
  local packaging
  local classifier
  local version

  if [ ${#fields[@]} -eq 3 ]; then version=${fields[2]}; fi
  if [ ${#fields[@]} -eq 4 ]; then classifier=${fields[2]}; version=${fields[3]}; fi

  local POM_DIR="`echo "${groupId}" | tr . /`/${artifactId}/${version}"
  local POM_PATH="$POM_DIR/${artifactId}-${version}.pom"

  artifact=${groupId}:${artifactId}:${version}:${packaging:=jar}
  [ -n "${classifier}" ] && artifact=${artifact}:${classifier}

  debug artifact=${artifact}
  debug path=${POM_PATH}

  # A string of the form groupId:artifactId:version[:packaging][:classifier]
  mvn dependency:get -Dartifact=${artifact} "$@"

  local tmpdir=$(mktemp -d)
  mkdir -p "$tmpdir/target/classes"
  unzip -q "$HOME/.m2/repository/${POM_PATH%.pom}.jar" -d "$tmpdir/target/classes"
  cp "$HOME/.m2/repository/$POM_PATH" "$tmpdir"

  mvn -f "$tmpdir/${artifactId}-${version}.pom" dependency:analyze-only "$@"
  rm -rf "$tmpdir"
}
