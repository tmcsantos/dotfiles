#!/usr/bin/env groovy

// based on https://github.com/jettro/small-scripts/blob/master/groovy/CleanDir.groovy

def cli = new CliBuilder(
    usage: 'mvn_purge [options]',
    header: 'Options:')
cli._(longOpt: 'help', 'print this message')
cli._(longOpt: 'dryRun', 'print only')

options = cli.parse(args)

if (options?.help ) {
  cli.usage()
  return
}

dryRun = options?.dryRun ?: false
now = new Date()
directoryFilter = new DirectoryFilter()
nonSnapshotDirectoryFilter = new NonSnapshotDirectoryFilter()

homeFolder = System.getProperty("user.home")
path = homeFolder + "/.m2/repository"

maxAgeSnapshotsInDays = 60
maxAgeInDays = 90

mainDir = new File(path)
if (!mainDir.directory) {
  printf("The provided directory \"%s\" is not a directory", path)
  System.exit(-1)
}

cleanMavenRepository(mainDir)

/*
 * Helper functions
 */

private def cleanMavenRepository(File file) {
  def lastModified = new Date(file.lastModified())
  def ageInDays = now - lastModified
  def directories = file.listFiles(directoryFilter)

  if (directories) {
    directories.each {
      cleanMavenRepository(it)
    }
  } else {
    if (ageInDays > maxAgeSnapshotsInDays && file.canonicalPath.endsWith("-SNAPSHOT")) {
      deleteDir(file)
    } else if (ageInDays > maxAgeInDays && !file.canonicalPath.endsWith("-SNAPSHOT")) {
      String highest = obtainHighestVersionOfArtifact(file)
      if (file.name != highest) {
        deleteDir(file)
      }
    }
  }
}

def deleteDir(File file) {
  if (dryRun) {
    println "will delete: $file"
  } else {
    file.deleteDir()
  }
}

/**
 * Returns the string representation of the artifact with the highest version
 * @param file File repsenting a directory to check for the highest version of artifact
 * @return String representing the highest version
 */
private String obtainHighestVersionOfArtifact(File file) {
  def folderWithVersions = file.parentFile
  // Keep only the highest version
  def versionsFolders = folderWithVersions.listFiles(nonSnapshotDirectoryFilter)
  def highest = '0'
  versionsFolders.each {
    if (higherThan(highest, it.name)) {
      highest = it.name
    }
  }
  return highest
}

/**
 * True if newVersion > than highestVersion. Higher means if the tokenized string is higher in one of the elements
 * starting from the left. If the token of the string is a pure number, we compare numbers. If (part of) it is a
 * we compare strings. Yes this could mean problems in very special cases. Therefore we love people that stick to
 * maven standards. There are some special cases, they are documented below.
 * - If an artifact ends with RELEASE, by default we value it higher than another artifact
 *
 * examples for strings that we value as a release are:
 * 3.0.0.RELEASE, 2.5.6, 2.3.4-beta1
 *
 * @param highestVersion String representing the current highest version
 * @param newVersion String to compare with the highest version
 * @return true if the newVersion is higher than the current highestVersion
 */
private boolean higherThan(highestVersion, newVersion) {
  def highestArr = highestVersion.tokenize('.')
  def newArr = newVersion.tokenize('.')
  if (highestVersion.endsWith("RELEASE") && !newVersion.endsWith("RELEASE")) {
    return false
  }
  return compareTwoIntegersInArray(highestArr, newArr, 0)
}

/**
 * Utility function that is used recursive to find the highest of two items in an array on the same position. If they are
 * equal, compare the next item in the array if available. If the first item of an array is teh same and one of the two
 * items has only one item in the array, the other one wins.
 * @param highestArr Array containing the elements of the current highest value
 * @param newArr Array containing the elements of the value to compare with the highest value
 * @param counter Integer representing the number in the array to compare (starting with 0)
 * @return true if the newArr is higher than the highestArray
 */
private boolean compareTwoIntegersInArray(highestArr, newArr, counter) {
  def counterPlus1 = counter + 1
  if (highestArr[counter] == newArr[counter]) {
    if (highestArr.size() > counterPlus1 && newArr.size() > counterPlus1) {
      return compareTwoIntegersInArray(highestArr, newArr, counterPlus1)
    } else if (newArr.size() > counterPlus1) {
      return true
    }
  } else {
    def highest = highestArr[counter]
    def newest = newArr[counter]
    if (highest.isInteger() && newest.isInteger()) {
      if (highest.toInteger() < newest.toInteger()) {
        return true
      }
    } else {
      if (highest < newest) {
        return true
      }
    }
  }
  return false
}


class DirectoryFilter implements FileFilter {
  boolean accept(File file) {
    return file.directory
  }
}

class NonSnapshotDirectoryFilter implements FileFilter {
  boolean accept(File file) {
    return file.directory && !file.name.endsWith("-SNAPSHOT")
  }
}