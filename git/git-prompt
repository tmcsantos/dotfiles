#!/usr/bin/env bash

GIT_PROMPT_PREFIX="["                 # start of the git info string
GIT_PROMPT_SUFFIX="]"                 # the end of the git info string
GIT_PROMPT_SEPARATOR="|"              # separates each item

GIT_PROMPT_STAGED="${RED}● "           # the number of staged files/directories
GIT_PROMPT_CONFLICTS="${RED}✖ "       # the number of files in conflict
GIT_PROMPT_CHANGED="${BLUE}✚ "        # the number of changed files

GIT_PROMPT_UNTRACKED="${CYAN}…"       # the number of untracked files/dirs
GIT_PROMPT_STASHED="${B_BLUE}⚑ "      # the number of stashed files/dir
GIT_PROMPT_CLEAN="${B_GREEN}✔"        # a colored flag indicating a "clean" repo

GIT_PROMPT_SYMBOLS_AHEAD="↑·"             # The symbol for "n versions ahead of origin"
GIT_PROMPT_SYMBOLS_BEHIND="↓·"            # The symbol for "n versions behind of origin"
GIT_PROMPT_SYMBOLS_PREHASH=":"            # Written before hash of commit, if no name could be found
GIT_PROMPT_SYMBOLS_NO_REMOTE_TRACKING="L" # This symbol is written after the branch, if the branch is not tracked 

# update _PS1
[[ "$_PS1" == *"__git_prompt__"*  ]] || _PS1="${_PS1/'\n'/__git_prompt__'\n'}"
# update prompt
[[ "$PROMPT_COMMAND" == *"__git_prompt"* ]] || PROMPT_COMMAND="$PROMPT_COMMAND"';__git_prompt'

function __git_prompt_read (){
  [[ -r "$1" ]] && IFS=$'\r\n' read "$2" <"$1"
}

function __git_status() {
  if [[ -d "$git_dir/rebase-merge" ]]; then
    __git_prompt_read "$git_dir/rebase-merge/head-name" branch
    __git_prompt_read "$git_dir/rebase-merge/msgnum" step
    __git_prompt_read "$git_dir/rebase-merge/end" total
    state="|REBASE"
  else
    if [[ -d "$git_dir/rebase-apply" ]]; then
      __git_prompt_read "$git_dir/rebase-apply/next" step
      __git_prompt_read "$git_dir/rebase-apply/last" total
      if [[ -f "$git_dir/rebase-apply/rebasing" ]]; then
        __git_prompt_read "$git_dir/rebase-apply/head-name" branch
        state="|REBASE"
      elif [[ -f "$git_dir/rebase-apply/applying" ]]; then
        state="|AM"
      else
        state="|AM/REBASE"
      fi
    elif [[ -f "$git_dir/MERGE_HEAD" ]]; then
      state="|MERGING"
    elif [[ -f "$git_dir/CHERRY_PICK_HEAD" ]]; then
      state="|CHERRY-PICKING"
    elif [[ -f "$git_dir/REVERT_HEAD" ]]; then
      state="|REVERTING"
    elif [[ -f "$git_dir/BISECT_LOG" ]]; then
      state="|BISECTING"
    fi
  fi
}

function __git_prompt() {
	# preserve exit status
	local exit=$?
  local gitstring
	local repo_info rev_parse_exit_code
	repo_info="$(git rev-parse --git-dir --is-inside-git-dir \
		--is-bare-repository --is-inside-work-tree \
		--short HEAD 2>/dev/null)"
	rev_parse_exit_code="$?"
  
	if [ -z "$repo_info" ]; then
    PS1="${PS1/__git_prompt__/$gitstring}"
		return $exit
	fi

	local short_sha=""
	if [ "$rev_parse_exit_code" = "0" ]; then
		short_sha="${repo_info##*$'\n'}"
		repo_info="${repo_info%$'\n'*}"
	fi
	local inside_worktree="${repo_info##*$'\n'}"
	repo_info="${repo_info%$'\n'*}"
	local bare_repo="${repo_info##*$'\n'}"
	repo_info="${repo_info%$'\n'*}"
	local inside_gitdir="${repo_info##*$'\n'}"
	local git_dir="${repo_info%$'\n'*}"

  local branch=""
  local state=""
  local step=""
  local total""
  __git_status

  if [[ -n "$branch" ]]; then
    :
  else
    local head=""
    if ! __git_prompt_read "$git_dir/HEAD" head; then
      return $exit
    fi
    # is it a symbolic ref?
    branch="${head#ref: }"
    if [[ "$head" = "$branch" ]]; then
      branch="$GIT_PROMPT_SYMBOLS_PREHASH$short_sha"
    fi
  fi

  if [[ -n "$step" ]] && [[ -n "$total" ]]; then
    state="$state $step/$total"
  fi

  local c=""
  local staged=0
  local unstaged=0
  local conflicts=0
  local untracked=0
  local stashed=0

  if [[ "$inside_gitdir" = "true" ]]; then
    if [[ "$bare_repo" = "true" ]]; then
      c="BARE:"
    else
      branch="GIT_DIR!"
    fi
  elif [[ "$inside_worktree" = "true" ]]; then
    stashed=$(git rev-parse --verify --quiet refs/stash | wc -l)
    untracked=$(git ls-files --others --exclude-standard --directory --no-empty-directory --error-unmatch -- ':/*' 2>/dev/null | wc -l)
    staged=$(git diff --no-ext-diff --cached --name-only | wc -l)
    unstaged=$(git diff --no-ext-diff --name-only --diff-filter=M | wc -l)
    conflicts=$(git diff --no-ext-diff --name-only --diff-filter=U | wc -l)
  fi

  clean=0
  if (( staged == 0 && untracked == 0 && staged == 0 && unstaged == 0 && conflicts == 0 )); then
    clean=1
  fi

  branch="${branch##refs/heads/}"
  local up_state=$(__git_show_upstream)

  gitstring=" $GIT_PROMPT_PREFIX"
  gitstring="$gitstring${MAGENTA}$branch${NC}"
  [[ -n "$state" ]] && gitstring="$gitstring$state"
  gitstring="$gitstring$up_state"

  if [[ $clean = 0 ]]; then
    gitstring="$gitstring$GIT_PROMPT_SEPARATOR"
    [[ $staged -eq 0 ]] || gitstring="$gitstring$GIT_PROMPT_STAGED$staged"
    [[ $conflicts -eq 0 ]] || gitstring="$gitstring$GIT_PROMPT_CONFLICTS$conflicts"
    [[ $unstaged -eq 0 ]] || gitstring="$gitstring$GIT_PROMPT_CHANGED$unstaged"
    [[ $untracked -eq 0 ]] || gitstring="$gitstring$GIT_PROMPT_UNTRACKED$untracked"
    [[ $stashed -eq 0 ]] || gitstring="$gitstring$GIT_PROMPT_STASHED$stashed"
  fi
  gitstring="$gitstring${NC}$GIT_PROMPT_SUFFIX"

  PS1="${PS1/__git_prompt__/$gitstring}"

  return $exit
}


function __git_show_upstream() {
  local name count p
  
	# Find how many commits we are ahead/behind our upstream
  count="$(git rev-list --count --left-right @{upstream}...HEAD 2>/dev/null)"
  [[ -n "$count" ]] && name="$(git rev-parse \
    --abbrev-ref @{upstream} 2>/dev/null)"

  case "$count" in
    "")  # no upstream
      p="$GIT_PROMPT_SYMBOLS_NO_REMOTE_TRACKING" ;;
    0[[:space:]]0)  # equal upstream
      p="" ;;
    0[[:space:]]*)  # ahead of upstream
      p="$GIT_PROMPT_SYMBOLS_AHEAD${count#0[[:space:]]}" ;;
    *[[:space:]]0)  # behind upstream
      p="$GIT_PROMPT_SYMBOLS_BEHIND${count%[[:space:]]0}" ;;
    *)  # diverged
      p="$GIT_PROMPT_SYMBOLS_BEHIND${count%[[:space:]]*}$GIT_PROMPT_SYMBOLS_AHEAD${count#*[[:space:]]}" ;;
  esac
  [[ -n "$p" ]] && echo -ne " $p"
  [[ -n "$name" ]] && echo -ne " $name"
}
